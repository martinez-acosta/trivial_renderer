/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "renderer_t"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "renderer_t"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "0.1"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * input_arg;	/**< @brief archivo a leer.  */
  char * input_orig;	/**< @brief archivo a leer original value given at command line.  */
  const char *input_help; /**< @brief archivo a leer help description.  */
  char * output_dir_arg;	/**< @brief directorio de salida.  */
  char * output_dir_orig;	/**< @brief directorio de salida original value given at command line.  */
  const char *output_dir_help; /**< @brief directorio de salida help description.  */
  char * resolution_arg;	/**< @brief resolución de la imagen en la forma <x,y>.  */
  char * resolution_orig;	/**< @brief resolución de la imagen en la forma <x,y> original value given at command line.  */
  const char *resolution_help; /**< @brief resolución de la imagen en la forma <x,y> help description.  */
  char * camera_arg;	/**< @brief coordenadas de la cámara <x,y,z>.  */
  char * camera_orig;	/**< @brief coordenadas de la cámara <x,y,z> original value given at command line.  */
  const char *camera_help; /**< @brief coordenadas de la cámara <x,y,z> help description.  */
  char * angleOfView_arg;	/**< @brief angleOfView.  */
  char * angleOfView_orig;	/**< @brief angleOfView original value given at command line.  */
  const char *angleOfView_help; /**< @brief angleOfView help description.  */
  char * near_arg;	/**< @brief plano cercano.  */
  char * near_orig;	/**< @brief plano cercano original value given at command line.  */
  const char *near_help; /**< @brief plano cercano help description.  */
  char * far_arg;	/**< @brief plano lejano.  */
  char * far_orig;	/**< @brief plano lejano original value given at command line.  */
  const char *far_help; /**< @brief plano lejano help description.  */
  char * rotate_arg;	/**< @brief Rotación x,y,z.  */
  char * rotate_orig;	/**< @brief Rotación x,y,z original value given at command line.  */
  const char *rotate_help; /**< @brief Rotación x,y,z help description.  */
  char * time_arg;	/**< @brief tiempo a animar en minutos.  */
  char * time_orig;	/**< @brief tiempo a animar en minutos original value given at command line.  */
  const char *time_help; /**< @brief tiempo a animar en minutos help description.  */
  char * scale_arg;	/**< @brief Escalar la figura en x,y,z.  */
  char * scale_orig;	/**< @brief Escalar la figura en x,y,z original value given at command line.  */
  const char *scale_help; /**< @brief Escalar la figura en x,y,z help description.  */
  char * scale_x_arg;	/**< @brief Escala en x.  */
  char * scale_x_orig;	/**< @brief Escala en x original value given at command line.  */
  const char *scale_x_help; /**< @brief Escala en x help description.  */
  char * scale_y_arg;	/**< @brief Escala en y.  */
  char * scale_y_orig;	/**< @brief Escala en y original value given at command line.  */
  const char *scale_y_help; /**< @brief Escala en y help description.  */
  char * scale_z_arg;	/**< @brief Escala en z.  */
  char * scale_z_orig;	/**< @brief Escala en z original value given at command line.  */
  const char *scale_z_help; /**< @brief Escala en z help description.  */
  const char *wireframe_help; /**< @brief activa el renderizado wireframe help description.  */
  const char *faceHiding_help; /**< @brief activa el ocultamiento de caras help description.  */
  char * bezier_curve_arg;	/**< @brief curva de bézier a seguir con cuatro puntos de control en la forma p1,p2,p3,p4.  */
  char * bezier_curve_orig;	/**< @brief curva de bézier a seguir con cuatro puntos de control en la forma p1,p2,p3,p4 original value given at command line.  */
  const char *bezier_curve_help; /**< @brief curva de bézier a seguir con cuatro puntos de control en la forma p1,p2,p3,p4 help description.  */
  char * bcurve_arg;	/**< @brief curva de bézier a leer.  */
  char * bcurve_orig;	/**< @brief curva de bézier a leer original value given at command line.  */
  const char *bcurve_help; /**< @brief curva de bézier a leer help description.  */
  char * hermite_curve_arg;	/**< @brief curva de hermite a seguir con dos puntos de control en la forma p1,p2.  */
  char * hermite_curve_orig;	/**< @brief curva de hermite a seguir con dos puntos de control en la forma p1,p2 original value given at command line.  */
  const char *hermite_curve_help; /**< @brief curva de hermite a seguir con dos puntos de control en la forma p1,p2 help description.  */
  char * bezier_surface_arg;	/**< @brief archivo de superficie de bézier con los 16 puntos.  */
  char * bezier_surface_orig;	/**< @brief archivo de superficie de bézier con los 16 puntos original value given at command line.  */
  const char *bezier_surface_help; /**< @brief archivo de superficie de bézier con los 16 puntos help description.  */
  char * hermite_surface_arg;	/**< @brief archivo de superficie de hermite con los 16 puntos.  */
  char * hermite_surface_orig;	/**< @brief archivo de superficie de hermite con los 16 puntos original value given at command line.  */
  const char *hermite_surface_help; /**< @brief archivo de superficie de hermite con los 16 puntos help description.  */
  char * line_arg;	/**< @brief línea a seguir, dos puntos: p1,p2.  */
  char * line_orig;	/**< @brief línea a seguir, dos puntos: p1,p2 original value given at command line.  */
  const char *line_help; /**< @brief línea a seguir, dos puntos: p1,p2 help description.  */
  const char *zBuffer_help; /**< @brief z bufffer con coordenadas baricéntricas help description.  */
  char * specular_arg;	/**< @brief activa la iluminación especular.  */
  char * specular_orig;	/**< @brief activa la iluminación especular original value given at command line.  */
  const char *specular_help; /**< @brief activa la iluminación especular help description.  */
  char * ambient_arg;	/**< @brief activa la iluminación de ambiente.  */
  char * ambient_orig;	/**< @brief activa la iluminación de ambiente original value given at command line.  */
  const char *ambient_help; /**< @brief activa la iluminación de ambiente help description.  */
  char * diffuse_arg;	/**< @brief activa la iluminación difusa.  */
  char * diffuse_orig;	/**< @brief activa la iluminación difusa original value given at command line.  */
  const char *diffuse_help; /**< @brief activa la iluminación difusa help description.  */
  char * phong_arg;	/**< @brief modelo de iluminación de Phong.  */
  char * phong_orig;	/**< @brief modelo de iluminación de Phong original value given at command line.  */
  const char *phong_help; /**< @brief modelo de iluminación de Phong help description.  */
  char * gourand_arg;	/**< @brief modelo de iluminación de Gourand.  */
  char * gourand_orig;	/**< @brief modelo de iluminación de Gourand original value given at command line.  */
  const char *gourand_help; /**< @brief modelo de iluminación de Gourand help description.  */
  char * flatShading_arg;	/**< @brief activa el renderizado con flatShading.  */
  char * flatShading_orig;	/**< @brief activa el renderizado con flatShading original value given at command line.  */
  const char *flatShading_help; /**< @brief activa el renderizado con flatShading help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int input_given ;	/**< @brief Whether input was given.  */
  unsigned int output_dir_given ;	/**< @brief Whether output_dir was given.  */
  unsigned int resolution_given ;	/**< @brief Whether resolution was given.  */
  unsigned int camera_given ;	/**< @brief Whether camera was given.  */
  unsigned int angleOfView_given ;	/**< @brief Whether angleOfView was given.  */
  unsigned int near_given ;	/**< @brief Whether near was given.  */
  unsigned int far_given ;	/**< @brief Whether far was given.  */
  unsigned int rotate_given ;	/**< @brief Whether rotate was given.  */
  unsigned int time_given ;	/**< @brief Whether time was given.  */
  unsigned int scale_given ;	/**< @brief Whether scale was given.  */
  unsigned int scale_x_given ;	/**< @brief Whether scale-x was given.  */
  unsigned int scale_y_given ;	/**< @brief Whether scale-y was given.  */
  unsigned int scale_z_given ;	/**< @brief Whether scale-z was given.  */
  unsigned int wireframe_given ;	/**< @brief Whether wireframe was given.  */
  unsigned int faceHiding_given ;	/**< @brief Whether faceHiding was given.  */
  unsigned int bezier_curve_given ;	/**< @brief Whether bezier-curve was given.  */
  unsigned int bcurve_given ;	/**< @brief Whether bcurve was given.  */
  unsigned int hermite_curve_given ;	/**< @brief Whether hermite-curve was given.  */
  unsigned int bezier_surface_given ;	/**< @brief Whether bezier-surface was given.  */
  unsigned int hermite_surface_given ;	/**< @brief Whether hermite-surface was given.  */
  unsigned int line_given ;	/**< @brief Whether line was given.  */
  unsigned int zBuffer_given ;	/**< @brief Whether zBuffer was given.  */
  unsigned int specular_given ;	/**< @brief Whether specular was given.  */
  unsigned int ambient_given ;	/**< @brief Whether ambient was given.  */
  unsigned int diffuse_given ;	/**< @brief Whether diffuse was given.  */
  unsigned int phong_given ;	/**< @brief Whether phong was given.  */
  unsigned int gourand_given ;	/**< @brief Whether gourand was given.  */
  unsigned int flatShading_given ;	/**< @brief Whether flatShading was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
